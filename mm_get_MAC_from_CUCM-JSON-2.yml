---
-   hosts: localhost
    gather_facts: no

    tasks:

    - name: Check that you can connect (GET) to CUCM and if it returns a status 200
      uri:
        url: https://10.142.0.1:8443/axl/
        validate_certs: no
        method: POST
        return_content: yes
        headers:
            Content-Type: "text/plain"
        user: devnet
        password: devnet
        force_basic_auth: yes
        body: <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ns='http://www.cisco.com/AXL/API/10.5'><soapenv:Header/><soapenv:Body><ns:executeSQLQuery><sql>SELECT DISTINCT d.name AS device_name,tm.name AS device_type,eu.userid,eu.firstname,eu.lastname FROM device d LEFT OUTER JOIN enduser eu on d.fkenduser=eu.pkid INNER JOIN typemodel tm on d.tkmodel=tm.enum WHERE eu.userid LIKE '{{username_mm}}' and d.name LIKE 'SEP%' ORDER BY eu.userid</sql></ns:executeSQLQuery></soapenv:Body></soapenv:Envelope>
      register: page_content

    - debug:
        var: username_mm

    - xml:
        xmlstring: "{{page_content.content}}"
        xpath: /soapenv:Envelope/soapenv:Body/ns:executeSQLQueryResponse/return/row/device_name
        namespaces:
            soapenv: http://schemas.xmlsoap.org/soap/envelope/
            ns: http://www.cisco.com/AXL/API/10.5
        content: text
      register: phone_mac
      
    - name: get_mac_address
      set_fact: 
         mac_device: "{{phone_mac.matches.0.device_name}}"
 
    - name: get_clean_mac_address
      set_fact: 
         clean_mac: "{{ mac_device | regex_replace('SEP') }}"

    - debug:
        var: clean_mac

    - name: GET the highest session ID from CPI in JSON format
      uri:
        url: 'https://10.23.77.200/webacs/api/v4/data/ClientSessions.json?macAddress={{clean_mac}}&.sort=-id&.maxResults=1'
        validate_certs: no
        method: GET
        return_content: yes
        body_format: json
        headers:
            Content-Type: "application/json"
        user: devnet
        password: Maticmind2018
        force_basic_auth: yes
      register: prime_sessions

    - debug:
        var: prime_sessions.content
      

    - name: parse the JSON output from CPI and save it in a new dictionary
      set_fact: 
         prime_json: "{{prime_sessions.content | from_json }}"

    - debug:
        msg: "{{prime_json}}"
    
    - name: GET only the URL related to the highest session ID
      set_fact:
        prime_session_url: "{{prime_json['queryResponse']['entityId'][0]['@url']}}"
     
    - debug:
            var: prime_session_url

    - name: GET the detailed info of the highest session ID in JSON format
      uri:
        url: '{{prime_session_url}}.json'
        validate_certs: no
        method: GET
        return_content: yes
        body_format: json
        headers:
            Content-Type: "application/json"
        user: devnet
        password: Maticmind2018
        force_basic_auth: yes
      register: session_facts

    - debug:
        var: session_facts.content
    
    - name: parse the JSON output from CPI and save it in a new dictionary
      set_fact: 
         prime_json_session: "{{session_facts.content | from_json }}"

      
    - name: GET the switch MGMT IP Address
      set_fact: 
         switch_IP: "{{prime_json_session.queryResponse.entity.0.clientSessionsDTO.deviceMgmtAddress.address}}"

    - debug:
        var: switch_IP
      
    - name: GET the switch interface number
      set_fact: 
         switch_Interface: "{{prime_json_session.queryResponse.entity.0.clientSessionsDTO.clientInterface}}"

    - debug:
        var: switch_Interface
      
    - name: GET the switch hostname
      set_fact: 
         switch_hostname: "{{prime_json_session.queryResponse.entity.0.clientSessionsDTO.deviceName}}"

    - debug:
        var: switch_hostname


-   hosts: MM_Vimodrone
    gather_facts: no
    connection: network_cli

    vars:
      ansible_network_os: ios

    tasks:

    - debug:
       var: hostvars['localhost']['switch_Interface']

    - ios_command:
        commands:
          - configure terminal
          - interface {{hostvars['localhost']['switch_Interface']}}
          - no power inline never
          - description {{username_mm}}
          - end
      when: ansible_host== hostvars['localhost']['switch_IP']


