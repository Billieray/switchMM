---
-   hosts: localhost
    gather_facts: no
#  connection: httpapi

#    vars:
#   ansible_network_os: ios
#       username_mm: fmenezes

    tasks:

    - name: Check that you can connect (GET) to CUCM and if it returns a status 200
      uri:
        url: https://10.142.0.1:8443/axl/
        validate_certs: no
        method: POST
        return_content: yes
        headers:
            Content-Type: "text/plain"
        user: devnet
        password: devnet
        force_basic_auth: yes
        body: <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ns='http://www.cisco.com/AXL/API/10.5'><soapenv:Header/><soapenv:Body><ns:executeSQLQuery><sql>SELECT DISTINCT d.name AS device_name,tm.name AS device_type,eu.userid,eu.firstname,eu.lastname FROM device d LEFT OUTER JOIN enduser eu on d.fkenduser=eu.pkid INNER JOIN typemodel tm on d.tkmodel=tm.enum WHERE eu.userid LIKE '{{username_mm}}' and d.name LIKE 'SEP%' ORDER BY eu.userid</sql></ns:executeSQLQuery></soapenv:Body></soapenv:Envelope>
      register: page_content

    - debug:
        var: username_mm

    - xml:
        xmlstring: "{{page_content.content}}"
        xpath: /soapenv:Envelope/soapenv:Body/ns:executeSQLQueryResponse/return/row/device_name
        namespaces:
            soapenv: http://schemas.xmlsoap.org/soap/envelope/
            ns: http://www.cisco.com/AXL/API/10.5
        content: text
      register: phone_mac
      
    - name: get_mac_address
      set_fact: 
         mac_device: "{{phone_mac.matches.0.device_name}}"

#    - debug:
#        var: mac_device
 
    - name: get_clean_mac_address
      set_fact: 
         clean_mac: "{{ mac_device | regex_replace('SEP') }}"

    - debug:
        var: clean_mac

    - name: get_mac_session_from_PRIME
      uri:
        url: 'https://10.23.77.200/webacs/api/v4/data/ClientSessions.json?macAddress={{clean_mac}}&.sort=-id&.maxResults=1'
        validate_certs: no
        method: GET
        return_content: yes
        body_format: json
        headers:
            Content-Type: "application/x-www-form-urlencoded"
        user: devnet
        password: Maticmind2018
        force_basic_auth: yes
      register: prime_sessions

    - debug:
        var: prime_sessions.content.queryResponse[0]
      
#    - xml:
#        xmlstring: "{{prime_sessions.content}}"
#        xpath: /queryResponse/entityId
#        content: text
#      register: sessions_mac

#    - debug:
#        var: sessions_mac

#    - name: get_sessions_cont
#      set_fact: 
#         sessions_count: "{{sessions_mac.count}}"
#
#    - debug:
#        var: sessions_count

    - name: get_highest_session_ID
      set_fact: 
         highest_session_ID: "{{prime_sessions.content.queryResponse.entityId.id}}"

    - debug:
        var: highest_session_ID

    - name: get_session_facts
      uri:
        url: https://10.23.77.200/webacs/api/v4/data/ClientSessions/{{highest_session_ID}}.json
        validate_certs: no
        method: GET
        return_content: yes
        headers:
            Content-Type: "application/x-www-form-urlencoded"
        user: devnet
        password: Maticmind2018
        force_basic_auth: yes
      register: session_facts

    - debug:
        var: session_facts.content

#    - xml:
#        xmlstring: "{{session_facts.content}}"
#        xpath: /queryResponse/entity/clientSessionsDTO/deviceMgmtAddress/address
#        content: text
#      register: switch_IPaddress
      
    - name: get_switch_IPaddress
      set_fact: 
         switch_IP: "{{queryResponse.entity.clientSessionsDTO.deviceMgmtAddress.address}}"

    - debug:
        var: switch_IP

#    - xml:
#        xmlstring: "{{session_facts.content}}"
#        xpath: /queryResponse/entity/clientSessionsDTO/clientInterface
#        content: text
#      register: switch_If
      
    - name: get_switch_If
      set_fact: 
         switch_Interface: "{{queryResponse.entity.clientSessionsDTO.clientInterface}}"

    - debug:
        var: switch_Interface

 #   - xml:
 #       xmlstring: "{{session_facts.content}}"
 #       xpath: /queryResponse/entity/clientSessionsDTO/deviceName
 #       content: text
 #     register: switch_name
      
    - name: get_switch_hostname
      set_fact: 
         switch_hostname: "{{queryResponse.entity.clientSessionsDTO.deviceName}}"

    - debug:
        var: switch_hostname


-   hosts: MM_Vimodrone
    gather_facts: no
    connection: network_cli

    vars:
      ansible_network_os: ios

    tasks:

    - debug:
       var: hostvars['localhost']['switch_Interface']

    - ios_command:
        commands:
          - configure terminal
          - interface {{hostvars['localhost']['switch_Interface']}}
          - no power inline never
          - description {{username_mm}}
          - end
      when: ansible_host== hostvars['localhost']['switch_IP']

#    - debug:
#        var: inventory_hostname
      
#    when: inventory_hostname == 10.22.22.69


